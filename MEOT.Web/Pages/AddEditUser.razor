@page "/AddEditUser"
@page "/AddEditUser/{id}"

@using MEOT.lib.Managers
@using MEOT.lib.Objects
@using MEOT.lib.Enums

@inject UserManager userManager
@inject NavigationManager NavManager

@inherits BaseRazorPage

@if (!IsNew)
{
    <h1>Edit User</h1>
}
else
{
    <h1>Add New User</h1>
}

<EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">
            @ErrorMessage
        </div>
    }

    <p>
        <label>
            Email Address
        
            <InputText id="emailaddress" type="email" @bind-Value="model.EmailAddress" />
        </label>
    </p>
    
    <p>
        <label>
            Password
        
            <InputText id="password" type="password" @bind-Value="model.Password" />
        </label>
    </p>
    
    <p>
        <label>
            Role
        
            <InputSelect id="Role" name="ThreatLevel" @bind-CurrentValueAsString="model.Role" @bind-Value="model.Role">
                @foreach (var role in Enum.GetNames(typeof(Roles)))
                {
                    @if (role == model.Role.ToString())
                    {
                        <option selected value="@role">@role</option>
                    }
                    else
                    {
                        <option value="@role">@role</option>
                    }
                }
            </InputSelect>
        </label>
    </p>

    <button type="submit" class="btn btn-primary btn-rounded"><i class="bi-save"></i>&nbsp; Save</button>
</EditForm>

@code {
    [Parameter]
    public string id { get; set; }

    public string ErrorMessage { get; set; }

    private bool IsNew;

    private User model = new User();

    protected override void OnInitialized()
    {
        if (!IsAuthenticated)
        {
            RedirectHome(NavManager);

            return;
        }

        IsNew = string.IsNullOrEmpty(id);

        if (IsNew)
        {
            return;
        }
        
        model = userManager.GetUserById(Convert.ToInt32(id));
    }

    private void HandleValidSubmit()
    {
        ErrorMessage = userManager.CreateOrUpdate(model, IsNew);

        if (string.IsNullOrEmpty(ErrorMessage))
        {
            NavManager.NavigateTo("/ManageUsers");
        }
    }
}