using System;
using System.Collections.Generic;
using System.Linq;
using MEOT.lib.Containers;
using MEOT.lib.DAL.Base;
using MEOT.lib.Objects;

namespace MEOT.lib.Managers
{
    public class MalwareManager
    {
        private IDAL _db;

        public MalwareManager(IDAL db)
        {
            _db = db;
        }

        public void DeleteMalware(int id)
        {
            _db.DeleteById<Malware>(id); // Delete the root record

            // Delete associated records
            _db.DeleteWhere<MalwareCheckpoint>(a => a.MalwareId == id);

            _db.DeleteWhere<MalwareVendorCheckpoint>(a => a.MalwareId == id);
        }

        public List<Malware> GetAllMalware() => _db.SelectAll<Malware>().OrderBy(a => a.Name).ToList();

        public Malware GetMalwareById(int id) => _db.SelectOne<Malware>(id);

        public void CreateOrUpdate(Malware malware, bool create)
        {
            if (create)
            {
                _db.Insert(malware);
            }
            else
            {
                _db.Update(malware);
            }
        }

        public MalwareCheckpoint GetCheckpoint(int malwareId) =>
            _db.SelectOne<MalwareCheckpoint>(a => a.MalwareId == malwareId);

        public List<MalwareVendorCheckpoint> GetVendorCheckpoints(int malwareId) =>
            _db.SelectAll<MalwareVendorCheckpoint>().Where(a => a.MalwareId == malwareId).OrderBy(a => a.VendorName).ToList();

        public List<Malware> GetDashboardEnabled() =>
            _db.SelectAll<Malware>().Where(a => a.Enabled).OrderBy(a => a.Name).ToList();

        public VendorContainer GetVendorData(string vendorName)
        {
            var container = new VendorContainer();

            var analysis = _db.SelectAll<MalwareVendorCheckpoint>(a => a.VendorName == vendorName);

            var malware = _db.SelectAll<Malware>();

            container.AverageTimeToDetect = analysis.Average(a => a.HoursToDetection);
            container.NumAttempts = analysis.Count;
            container.NumDetections = analysis.Count(a => a.Detected);
            container.DetailedAnalysis = analysis.Select(a => new VendorDetailedAnalysis
            {
                Detected = a.Detected,
                HoursToDetect = a.HoursToDetection,
                MalwareId = a.MalwareId,
                MalwareName = malware.FirstOrDefault(b => b.Id == a.MalwareId)?.Name
            }).OrderBy(a => a.MalwareName).ToList();

            return container;
        }

        public Malware GetMalwareQuery(string query) =>
            int.TryParse(query, out var id) ? 
                _db.SelectOne<Malware>(id) : 
                _db.SelectOne<Malware>(a => a.SHA1 == query || a.Name == query);
    }
}